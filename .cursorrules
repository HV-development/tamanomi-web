# Cursor Project Rules

## 開発ブランチ作成ルール

新しいチャットで指示を受けた際は、必ず以下の手順で作業を実行してください：

### 1. 開発ブランチの作成
- `develop`ブランチから新しい開発ブランチを作成
- 開発ブランチ名は作業内容を表す適切な名前を付ける（例：`feature/otp-button-removal`、`fix/login-validation`など）

### 2. 作業の実行
- 作成した開発ブランチで作業を実行
- コードの変更や新機能の実装を行う

### 3. 作業完了後の処理
- 作業完了後、developブランチにマージ
- 必要に応じてプルリクエストを作成

### 4. ブランチ作成コマンド例
```bash
git checkout develop
git pull origin develop
git checkout -b feature/[作業内容]
```

## 型定義とバリデーション管理ルール

### 1. 型定義・バリデーションの一元管理
- **型定義・バリデーション追加**: `tamanomi-schemas/` ディレクトリを修正
- **パッケージ公開**: GitHub Packages (`@hv-development/schemas`) に自動公開
- **開発環境**: ローカル参照 (`pnpm add @hv-development/schemas@file:../tamanomi-schemas`)
- **本番環境**: GitHub Packages (`pnpm add @hv-development/schemas`)

### 2. インポート方法
- 型定義やバリデーション関数は `@hv-development/schemas` からインポート
- 例: `import { UserSchema, validateUser } from '@hv-development/schemas'`

### 3. 禁止事項
- 各プロジェクト内で独自の型定義やバリデーション関数を作成しない
- `tamanomi-schemas/` 以外での型定義・バリデーション管理は禁止

このルールにより、開発作業の履歴管理とチーム開発の効率化を図ります。
